{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":12253121,"sourceType":"datasetVersion","datasetId":7720577}],"dockerImageVersionId":31041,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-07-03T05:01:48.055887Z","iopub.execute_input":"2025-07-03T05:01:48.056686Z","iopub.status.idle":"2025-07-03T05:01:48.389710Z","shell.execute_reply.started":"2025-07-03T05:01:48.056647Z","shell.execute_reply":"2025-07-03T05:01:48.389068Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/mouse-dynamicss/user9/session_8764610836.csv\n/kaggle/input/mouse-dynamicss/user9/session_3879637058.csv\n/kaggle/input/mouse-dynamicss/user9/session_3390119815.csv\n/kaggle/input/mouse-dynamicss/user9/session_7285432516.csv\n/kaggle/input/mouse-dynamicss/user9/session_4373781904.csv\n/kaggle/input/mouse-dynamicss/user9/session_5155383252.csv\n/kaggle/input/mouse-dynamicss/user9/session_0335985747.csv\n/kaggle/input/mouse-dynamicss/user7/session_6668463071.csv\n/kaggle/input/mouse-dynamicss/user7/session_9017095287.csv\n/kaggle/input/mouse-dynamicss/user7/session_8961330453.csv\n/kaggle/input/mouse-dynamicss/user7/session_1060325796.csv\n/kaggle/input/mouse-dynamicss/user7/session_3320405034.csv\n/kaggle/input/mouse-dynamicss/user7/session_0041905381.csv\n/kaggle/input/mouse-dynamicss/user7/session_3826583375.csv\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"!pip install torchinfo pandas scikit-learn matplotlib seaborn\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-03T05:01:48.998821Z","iopub.execute_input":"2025-07-03T05:01:48.999527Z","iopub.status.idle":"2025-07-03T05:01:53.161753Z","shell.execute_reply.started":"2025-07-03T05:01:48.999502Z","shell.execute_reply":"2025-07-03T05:01:53.160990Z"}},"outputs":[{"name":"stdout","text":"Requirement already satisfied: torchinfo in /usr/local/lib/python3.11/dist-packages (1.8.0)\nRequirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.3)\nRequirement already satisfied: scikit-learn in /usr/local/lib/python3.11/dist-packages (1.2.2)\nRequirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (3.7.2)\nRequirement already satisfied: seaborn in /usr/local/lib/python3.11/dist-packages (0.12.2)\nRequirement already satisfied: numpy>=1.23.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (1.26.4)\nRequirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.9.0.post0)\nRequirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\nRequirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\nRequirement already satisfied: scipy>=1.3.2 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.15.2)\nRequirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.5.0)\nRequirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (3.6.0)\nRequirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.3.1)\nRequirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (0.12.1)\nRequirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (4.57.0)\nRequirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.4.8)\nRequirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (25.0)\nRequirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (11.1.0)\nRequirement already satisfied: pyparsing<3.1,>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (3.0.9)\nRequirement already satisfied: mkl_fft in /usr/local/lib/python3.11/dist-packages (from numpy>=1.23.2->pandas) (1.3.8)\nRequirement already satisfied: mkl_random in /usr/local/lib/python3.11/dist-packages (from numpy>=1.23.2->pandas) (1.2.4)\nRequirement already satisfied: mkl_umath in /usr/local/lib/python3.11/dist-packages (from numpy>=1.23.2->pandas) (0.1.1)\nRequirement already satisfied: mkl in /usr/local/lib/python3.11/dist-packages (from numpy>=1.23.2->pandas) (2025.1.0)\nRequirement already satisfied: tbb4py in /usr/local/lib/python3.11/dist-packages (from numpy>=1.23.2->pandas) (2022.1.0)\nRequirement already satisfied: mkl-service in /usr/local/lib/python3.11/dist-packages (from numpy>=1.23.2->pandas) (2.4.1)\nRequirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\nRequirement already satisfied: intel-openmp<2026,>=2024 in /usr/local/lib/python3.11/dist-packages (from mkl->numpy>=1.23.2->pandas) (2024.2.0)\nRequirement already satisfied: tbb==2022.* in /usr/local/lib/python3.11/dist-packages (from mkl->numpy>=1.23.2->pandas) (2022.1.0)\nRequirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.11/dist-packages (from tbb==2022.*->mkl->numpy>=1.23.2->pandas) (1.3.0)\nRequirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.11/dist-packages (from mkl_umath->numpy>=1.23.2->pandas) (2024.2.0)\nRequirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.11/dist-packages (from intel-openmp<2026,>=2024->mkl->numpy>=1.23.2->pandas) (2024.2.0)\n","output_type":"stream"}],"execution_count":3},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom torch.utils.data import TensorDataset, DataLoader\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-03T05:01:53.163335Z","iopub.execute_input":"2025-07-03T05:01:53.163545Z","iopub.status.idle":"2025-07-03T05:01:58.196340Z","shell.execute_reply.started":"2025-07-03T05:01:53.163524Z","shell.execute_reply":"2025-07-03T05:01:58.195676Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport torch\nimport torch.nn as nn\nfrom torch.utils.data import DataLoader, TensorDataset\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.utils.class_weight import compute_class_weight\nfrom sklearn.metrics import classification_report, confusion_matrix, roc_auc_score, roc_curve\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom tqdm import tqdm\nimport math\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-03T05:01:58.197613Z","iopub.execute_input":"2025-07-03T05:01:58.197996Z","iopub.status.idle":"2025-07-03T05:01:58.202746Z","shell.execute_reply.started":"2025-07-03T05:01:58.197967Z","shell.execute_reply":"2025-07-03T05:01:58.202181Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"import pandas as pd\n\n# === Load CSVs ===\n# User 7 Sessions\ndf7_1 = pd.read_csv(\"/kaggle/input/mouse-dynamicss/user7/session_0041905381.csv\")\ndf7_2 = pd.read_csv(\"/kaggle/input/mouse-dynamicss/user7/session_1060325796.csv\")\n\n# User 9 Sessions\ndf9_1 = pd.read_csv(\"/kaggle/input/mouse-dynamicss/user9/session_0335985747.csv\")\ndf9_2 = pd.read_csv(\"/kaggle/input/mouse-dynamicss/user9/session_3390119815.csv\")\n\n# === Add Username Labels ===\nfor df in [df7_1, df7_2]:\n    df['Username'] = 'User7'\n    \nfor df in [df9_1, df9_2]:\n    df['Username'] = 'User9'\n\n# === Combine All Data ===\ndf = pd.concat([df7_1, df7_2, df9_1, df9_2], ignore_index=True)\n\n# === Display Info ===\nprint(\"✅ Combined shape:\", df.shape)\nprint(df.head())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-03T05:01:58.203442Z","iopub.execute_input":"2025-07-03T05:01:58.203658Z","iopub.status.idle":"2025-07-03T05:01:58.512435Z","shell.execute_reply.started":"2025-07-03T05:01:58.203635Z","shell.execute_reply":"2025-07-03T05:01:58.511802Z"}},"outputs":[{"name":"stdout","text":"✅ Combined shape: (227035, 7)\n   record timestamp  client timestamp    button state    x    y Username\n0               0.0             0.000  NoButton  Move  126  337    User7\n1               0.0             0.016  NoButton  Move  129  337    User7\n2               0.0             0.032  NoButton  Move  136  337    User7\n3               0.0             0.047  NoButton  Move  155  339    User7\n4               0.0             0.063  NoButton  Move  185  340    User7\n","output_type":"stream"}],"execution_count":6},{"cell_type":"code","source":"# Drop rows with missing values\ndf = df.dropna(subset=['x', 'y', 'Username'])\n\n# Normalize x and y (optional but recommended)\ndf['x'] = df['x'].astype(float)\ndf['y'] = df['y'].astype(float)\n\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\ndf[['x', 'y']] = scaler.fit_transform(df[['x', 'y']])\n\n# Encode user labels\nlabel_encoder = LabelEncoder()\ndf['UserEncoded'] = label_encoder.fit_transform(df['Username'])\n\nprint(\"Label mapping:\", dict(zip(label_encoder.classes_, label_encoder.transform(label_encoder.classes_))))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-03T05:02:01.010776Z","iopub.execute_input":"2025-07-03T05:02:01.011049Z","iopub.status.idle":"2025-07-03T05:02:01.162650Z","shell.execute_reply.started":"2025-07-03T05:02:01.011028Z","shell.execute_reply":"2025-07-03T05:02:01.161858Z"}},"outputs":[{"name":"stdout","text":"Label mapping: {'User7': 0, 'User9': 1}\n","output_type":"stream"}],"execution_count":7},{"cell_type":"code","source":"print(df.columns.tolist())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-03T05:02:02.724807Z","iopub.execute_input":"2025-07-03T05:02:02.725072Z","iopub.status.idle":"2025-07-03T05:02:02.729603Z","shell.execute_reply.started":"2025-07-03T05:02:02.725052Z","shell.execute_reply":"2025-07-03T05:02:02.728840Z"}},"outputs":[{"name":"stdout","text":"['record timestamp', 'client timestamp', 'button', 'state', 'x', 'y', 'Username', 'UserEncoded']\n","output_type":"stream"}],"execution_count":8},{"cell_type":"code","source":"import torch\nfrom sklearn.preprocessing import LabelEncoder\nfrom tqdm import tqdm\n\nSEQ_LEN = 50\nX, y = [], []\n\n# ✅ Use all available data from each user (no head())\nlimited_df = pd.concat([\n    df[df['Username'] == 'User7'],\n    df[df['Username'] == 'User9']\n], ignore_index=True)\n\n# Optional: sort by timestamp to preserve movement order\nlimited_df = limited_df.sort_values(by='record timestamp').reset_index(drop=True)\n\n# Re-encode user labels (if not done already)\nuser_encoder = LabelEncoder()\nlimited_df['UserEncoded'] = user_encoder.fit_transform(limited_df['Username'])\n\n# Define feature columns\nfeatures = ['x', 'y']\n\n# Build sequences of SEQ_LEN\nfor i in tqdm(range(len(limited_df) - SEQ_LEN)):\n    segment = limited_df.iloc[i:i+SEQ_LEN]\n    users = segment['UserEncoded']\n\n    if len(set(users)) == 1:  # Sequence must belong to one user\n        coords = segment[features].values\n        X.append(coords)\n        y.append(users.iloc[0])\n\n# Convert to tensors\nX = torch.tensor(X, dtype=torch.float32)  # Shape: [N, SEQ_LEN, 2]\ny = torch.tensor(y, dtype=torch.long)\n\nprint(f\"✅ Final Tensor Shapes: X = {X.shape}, y = {y.shape}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-03T05:02:04.345748Z","iopub.execute_input":"2025-07-03T05:02:04.346458Z","iopub.status.idle":"2025-07-03T05:03:00.173643Z","shell.execute_reply.started":"2025-07-03T05:02:04.346433Z","shell.execute_reply":"2025-07-03T05:03:00.172930Z"}},"outputs":[{"name":"stderr","text":"100%|██████████| 226985/226985 [00:49<00:00, 4621.47it/s]\n","output_type":"stream"},{"name":"stdout","text":"✅ Final Tensor Shapes: X = torch.Size([100677, 50, 2]), y = torch.Size([100677])\n","output_type":"stream"},{"name":"stderr","text":"/tmp/ipykernel_35/48723058.py:35: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n  X = torch.tensor(X, dtype=torch.float32)  # Shape: [N, SEQ_LEN, 2]\n","output_type":"stream"}],"execution_count":9},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport torch\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.utils.class_weight import compute_class_weight\nfrom torch.utils.data import TensorDataset, DataLoader\nfrom tqdm import tqdm\nimport torch.nn as nn\nimport math\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(\"✅ Using device:\", device)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-03T05:03:00.234494Z","iopub.execute_input":"2025-07-03T05:03:00.234772Z","iopub.status.idle":"2025-07-03T05:03:00.256849Z","shell.execute_reply.started":"2025-07-03T05:03:00.234750Z","shell.execute_reply":"2025-07-03T05:03:00.256241Z"}},"outputs":[{"name":"stdout","text":"✅ Using device: cuda\n","output_type":"stream"}],"execution_count":11},{"cell_type":"code","source":"X_np = X.numpy()\ny_np = y.numpy()\n\n# Stratified split\nX_train, X_val, y_train, y_val = train_test_split(\n    X_np, y_np, test_size=0.2, stratify=y_np, random_state=42\n)\n\nX_train = torch.tensor(X_train, dtype=torch.float32)\nX_val = torch.tensor(X_val, dtype=torch.float32)\ny_train = torch.tensor(y_train, dtype=torch.long)\ny_val = torch.tensor(y_val, dtype=torch.long)\n\ntrain_ds = TensorDataset(X_train, y_train)\nval_ds = TensorDataset(X_val, y_val)\n\ntrain_dl = DataLoader(train_ds, batch_size=32, shuffle=True)\nval_dl = DataLoader(val_ds, batch_size=32)\n\n# Compute class weights\nclass_weights = compute_class_weight(class_weight='balanced', classes=np.unique(y_np), y=y_np)\nclass_weights = torch.tensor(class_weights, dtype=torch.float32).to(device)\nprint(\"Class Weights:\", class_weights)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-03T05:03:00.258712Z","iopub.execute_input":"2025-07-03T05:03:00.258885Z","iopub.status.idle":"2025-07-03T05:03:00.835271Z","shell.execute_reply.started":"2025-07-03T05:03:00.258872Z","shell.execute_reply":"2025-07-03T05:03:00.834529Z"}},"outputs":[{"name":"stdout","text":"Class Weights: tensor([0.7484, 1.5065], device='cuda:0')\n","output_type":"stream"}],"execution_count":12},{"cell_type":"code","source":"class PositionalEncoding(nn.Module):\n    def __init__(self, d_model, max_len=500):\n        super().__init__()\n        pe = torch.zeros(max_len, d_model)\n        pos = torch.arange(0, max_len).unsqueeze(1)\n        div = torch.exp(torch.arange(0, d_model, 2) * -math.log(10000.0) / d_model)\n        pe[:, 0::2] = torch.sin(pos * div)\n        pe[:, 1::2] = torch.cos(pos * div)\n        self.register_buffer('pe', pe.unsqueeze(0))\n\n    def forward(self, x):\n        return x + self.pe[:, :x.size(1)]\n\nclass MultiHeadAttention(nn.Module):\n    def __init__(self, d_model, num_heads):\n        super().__init__()\n        assert d_model % num_heads == 0\n        self.d_k = d_model // num_heads\n        self.q = nn.Linear(d_model, d_model)\n        self.k = nn.Linear(d_model, d_model)\n        self.v = nn.Linear(d_model, d_model)\n        self.out = nn.Linear(d_model, d_model)\n\n    def forward(self, x):\n        B, T, D = x.shape\n        H = D // self.d_k\n        Q = self.q(x).view(B, T, H, self.d_k).transpose(1, 2)\n        K = self.k(x).view(B, T, H, self.d_k).transpose(1, 2)\n        V = self.v(x).view(B, T, H, self.d_k).transpose(1, 2)\n        scores = Q @ K.transpose(-2, -1) / math.sqrt(self.d_k)\n        weights = torch.softmax(scores, dim=-1)\n        output = weights @ V\n        output = output.transpose(1, 2).contiguous().view(B, T, D)\n        return self.out(output)\n\nclass TransformerBlock(nn.Module):\n    def __init__(self, d_model, num_heads, ff_dim=128):\n        super().__init__()\n        self.attn = MultiHeadAttention(d_model, num_heads)\n        self.norm1 = nn.LayerNorm(d_model)\n        self.ff = nn.Sequential(\n            nn.Linear(d_model, ff_dim),\n            nn.ReLU(),\n            nn.Linear(ff_dim, d_model)\n        )\n        self.norm2 = nn.LayerNorm(d_model)\n\n    def forward(self, x):\n        x = self.norm1(x + self.attn(x))\n        x = self.norm2(x + self.ff(x))\n        return x\n\nclass MouseDynamicsClassifier(nn.Module):\n    def __init__(self, input_dim=2, d_model=60, num_heads=6, num_layers=6, num_classes=2):\n        super().__init__()\n        self.input_proj = nn.Linear(input_dim, d_model)\n        self.pos_enc = PositionalEncoding(d_model)\n        self.transformer_blocks = nn.Sequential(*[TransformerBlock(d_model, num_heads) for _ in range(num_layers)])\n        self.classifier = nn.Linear(d_model, num_classes)\n\n    def forward(self, x):\n        x = self.input_proj(x)\n        x = self.pos_enc(x)\n        x = self.transformer_blocks(x)\n        x = x.mean(dim=1)  # Global mean pooling\n        return self.classifier(x)\n\nmodel = MouseDynamicsClassifier().to(device)\nloss_fn = nn.CrossEntropyLoss(weight=class_weights)\noptimizer = torch.optim.Adam(model.parameters(), lr=1e-3)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-03T05:03:00.836117Z","iopub.execute_input":"2025-07-03T05:03:00.836418Z","iopub.status.idle":"2025-07-03T05:03:03.522702Z","shell.execute_reply.started":"2025-07-03T05:03:00.836393Z","shell.execute_reply":"2025-07-03T05:03:03.522142Z"}},"outputs":[],"execution_count":13},{"cell_type":"code","source":"def train(model, train_dl, val_dl, epochs=10):\n    for epoch in range(epochs):\n        model.train()\n        total_loss = 0\n        for xb, yb in tqdm(train_dl, desc=f\"Epoch {epoch+1}/{epochs}\"):\n            xb, yb = xb.to(device), yb.to(device)\n            preds = model(xb)\n            loss = loss_fn(preds, yb)\n            optimizer.zero_grad()\n            loss.backward()\n            optimizer.step()\n            total_loss += loss.item()\n        \n        model.eval()\n        correct = 0\n        total = 0\n        with torch.no_grad():\n            for xb, yb in val_dl:\n                xb, yb = xb.to(device), yb.to(device)\n                preds = model(xb)\n                correct += (preds.argmax(1) == yb).sum().item()\n                total += yb.size(0)\n        acc = correct / total\n        print(f\"✅ Epoch {epoch+1} | Loss: {total_loss:.4f} | Val Acc: {acc:.2%}\")\n\ntrain(model, train_dl, val_dl, epochs=10)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-03T05:03:03.523492Z","iopub.execute_input":"2025-07-03T05:03:03.523792Z","iopub.status.idle":"2025-07-03T05:08:50.766972Z","shell.execute_reply.started":"2025-07-03T05:03:03.523777Z","shell.execute_reply":"2025-07-03T05:08:50.766338Z"}},"outputs":[{"name":"stderr","text":"Epoch 1/10: 100%|██████████| 2517/2517 [00:32<00:00, 76.28it/s]\n","output_type":"stream"},{"name":"stdout","text":"✅ Epoch 1 | Loss: 1368.3554 | Val Acc: 80.64%\n","output_type":"stream"},{"name":"stderr","text":"Epoch 2/10: 100%|██████████| 2517/2517 [00:32<00:00, 78.09it/s]\n","output_type":"stream"},{"name":"stdout","text":"✅ Epoch 2 | Loss: 961.4580 | Val Acc: 85.58%\n","output_type":"stream"},{"name":"stderr","text":"Epoch 3/10: 100%|██████████| 2517/2517 [00:32<00:00, 77.97it/s]\n","output_type":"stream"},{"name":"stdout","text":"✅ Epoch 3 | Loss: 778.0190 | Val Acc: 85.36%\n","output_type":"stream"},{"name":"stderr","text":"Epoch 4/10: 100%|██████████| 2517/2517 [00:32<00:00, 78.03it/s]\n","output_type":"stream"},{"name":"stdout","text":"✅ Epoch 4 | Loss: 625.4655 | Val Acc: 89.57%\n","output_type":"stream"},{"name":"stderr","text":"Epoch 5/10: 100%|██████████| 2517/2517 [00:32<00:00, 77.81it/s]\n","output_type":"stream"},{"name":"stdout","text":"✅ Epoch 5 | Loss: 533.1471 | Val Acc: 91.48%\n","output_type":"stream"},{"name":"stderr","text":"Epoch 6/10: 100%|██████████| 2517/2517 [00:32<00:00, 76.63it/s]\n","output_type":"stream"},{"name":"stdout","text":"✅ Epoch 6 | Loss: 467.3447 | Val Acc: 92.12%\n","output_type":"stream"},{"name":"stderr","text":"Epoch 7/10: 100%|██████████| 2517/2517 [00:32<00:00, 78.07it/s]\n","output_type":"stream"},{"name":"stdout","text":"✅ Epoch 7 | Loss: 408.7905 | Val Acc: 93.37%\n","output_type":"stream"},{"name":"stderr","text":"Epoch 8/10: 100%|██████████| 2517/2517 [00:32<00:00, 78.57it/s]\n","output_type":"stream"},{"name":"stdout","text":"✅ Epoch 8 | Loss: 371.3733 | Val Acc: 94.17%\n","output_type":"stream"},{"name":"stderr","text":"Epoch 9/10: 100%|██████████| 2517/2517 [00:32<00:00, 78.16it/s]\n","output_type":"stream"},{"name":"stdout","text":"✅ Epoch 9 | Loss: 332.5346 | Val Acc: 93.55%\n","output_type":"stream"},{"name":"stderr","text":"Epoch 10/10: 100%|██████████| 2517/2517 [00:31<00:00, 78.78it/s]\n","output_type":"stream"},{"name":"stdout","text":"✅ Epoch 10 | Loss: 296.4462 | Val Acc: 95.91%\n","output_type":"stream"}],"execution_count":14},{"cell_type":"code","source":"from sklearn.metrics import classification_report, confusion_matrix\n\nmodel.eval()\ny_true, y_pred = [], []\n\nwith torch.no_grad():\n    for xb, yb in val_dl:\n        xb = xb.to(device)\n        preds = model(xb)\n        y_true.extend(yb.tolist())\n        y_pred.extend(preds.argmax(1).cpu().tolist())\n\n# Report\nprint(classification_report(y_true, y_pred, target_names=user_encoder.classes_))\n\n# Confusion Matrix\ncm = confusion_matrix(y_true, y_pred)\nplt.figure(figsize=(6,5))\nsns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=user_encoder.classes_, yticklabels=user_encoder.classes_)\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"True\")\nplt.title(\"Confusion Matrix\")\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-03T05:08:50.767990Z","iopub.execute_input":"2025-07-03T05:08:50.768527Z","iopub.status.idle":"2025-07-03T05:08:53.396540Z","shell.execute_reply.started":"2025-07-03T05:08:50.768509Z","shell.execute_reply":"2025-07-03T05:08:53.395879Z"}},"outputs":[{"name":"stdout","text":"              precision    recall  f1-score   support\n\n       User7       0.98      0.95      0.97     13453\n       User9       0.91      0.97      0.94      6683\n\n    accuracy                           0.96     20136\n   macro avg       0.95      0.96      0.95     20136\nweighted avg       0.96      0.96      0.96     20136\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 600x500 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":15},{"cell_type":"code","source":"y_probs = []\nwith torch.no_grad():\n    for xb, _ in val_dl:\n        xb = xb.to(device)\n        probs = torch.softmax(model(xb), dim=1)[:, 1]  # class 1\n        y_probs.extend(probs.cpu().tolist())\n\nauc = roc_auc_score(y_true, y_probs)\nfpr, tpr, _ = roc_curve(y_true, y_probs)\n\nplt.figure(figsize=(8, 6))\nplt.plot(fpr, tpr, label=f'ROC (AUC = {auc:.4f})', color='blue')\nplt.plot([0, 1], [0, 1], '--', color='gray')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Curve')\nplt.legend()\nplt.grid(True)\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-03T05:08:53.397200Z","iopub.execute_input":"2025-07-03T05:08:53.397427Z","iopub.status.idle":"2025-07-03T05:08:56.012948Z","shell.execute_reply.started":"2025-07-03T05:08:53.397410Z","shell.execute_reply":"2025-07-03T05:08:56.012253Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":16},{"cell_type":"code","source":"import random\n\nmodel.eval()\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\n# Number of test samples per user\nNUM_SAMPLES = 5\n\nprint(\"\\n🔍 Predictions on Random 5 Samples Per User\\n\")\n\nfor user_name in user_encoder.classes_:\n    user_label = user_encoder.transform([user_name])[0]\n    \n    # Filter original dataframe for the user\n    user_df = df[df['UserEncoded'] == user_label].reset_index(drop=True)\n\n    print(f\"--- User: {user_name} ---\")\n\n    for _ in range(NUM_SAMPLES):\n        # Pick a valid random index for SEQ_LEN window\n        max_start = len(user_df) - SEQ_LEN\n        if max_start <= 0:\n            print(\"Not enough data for\", user_name)\n            break\n\n        start_idx = random.randint(0, max_start)\n        segment = user_df.iloc[start_idx:start_idx+SEQ_LEN][['x', 'y']].values\n\n        sample = torch.tensor([segment], dtype=torch.float32).to(device)\n\n        with torch.no_grad():\n            pred = model(sample)\n            pred_class = torch.argmax(pred, dim=1).item()\n\n        pred_user = user_encoder.inverse_transform([pred_class])[0]\n        print(f\"True: {user_name} | Predicted: {pred_user}\")\n    print()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-03T05:08:56.013824Z","iopub.execute_input":"2025-07-03T05:08:56.014567Z","iopub.status.idle":"2025-07-03T05:08:56.125595Z","shell.execute_reply.started":"2025-07-03T05:08:56.014543Z","shell.execute_reply":"2025-07-03T05:08:56.124876Z"}},"outputs":[{"name":"stdout","text":"\n🔍 Predictions on Random 5 Samples Per User\n\n--- User: User7 ---\nTrue: User7 | Predicted: User7\nTrue: User7 | Predicted: User7\nTrue: User7 | Predicted: User7\nTrue: User7 | Predicted: User7\nTrue: User7 | Predicted: User7\n\n--- User: User9 ---\nTrue: User9 | Predicted: User9\nTrue: User9 | Predicted: User7\nTrue: User9 | Predicted: User7\nTrue: User9 | Predicted: User7\nTrue: User9 | Predicted: User9\n\n","output_type":"stream"}],"execution_count":17},{"cell_type":"code","source":"# Count total samples\nprint(f\"📦 Total Samples: {len(X)}\")\n\n# Count train/val split\nprint(f\"🛠️ Training Samples: {len(X_train)}\")\nprint(f\"🧪 Validation Samples: {len(X_val)}\")\n\n# Count per user in training and validation\nfrom collections import Counter\n\ntrain_dist = Counter(y_train.tolist())\nval_dist = Counter(y_val.tolist())\n\nprint(\"\\n📊 Class Distribution:\")\nfor label in sorted(train_dist.keys()):\n    user = user_encoder.inverse_transform([label])[0]\n    print(f\"  {user} -> Train: {train_dist[label]} | Validation: {val_dist[label]}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-03T05:08:56.127322Z","iopub.execute_input":"2025-07-03T05:08:56.127553Z","iopub.status.idle":"2025-07-03T05:08:56.140145Z","shell.execute_reply.started":"2025-07-03T05:08:56.127536Z","shell.execute_reply":"2025-07-03T05:08:56.139438Z"}},"outputs":[{"name":"stdout","text":"📦 Total Samples: 100677\n🛠️ Training Samples: 80541\n🧪 Validation Samples: 20136\n\n📊 Class Distribution:\n  User7 -> Train: 53810 | Validation: 13453\n  User9 -> Train: 26731 | Validation: 6683\n","output_type":"stream"}],"execution_count":18},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}
